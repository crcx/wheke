( A bit of code to allow creation and usage of a cooperative  )
( multitasker.                                                )
(                                                             )
( This is an adaption of Reva's task.f, which was based on an )
( earlier one from Retro.                                     )
( - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - )
( To create a task:                                           )
(   task: ... code ;                                          )
(   ' word >task                                              )
(                                                             )
( To run the tasks:                                           )
(   idle                                                      )
(                                                             )
( To stop a task, have the task invoke 'stop' being           )
( cooperative.                                                )
( - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - )

{{
  create which 0 , 0 , 0 , 0 , 0 , 0 , 0 ,
  create n 0 ,
  : task-addr ( n-a ) which + ;
  : uncycle? n @ 1 <if 6 ;; then n @ 1- ;
  : cycle? n @ 6 >if 0 n ! then n @ dup 1+ n ! ;
---reveal---
  : stop  ( -  ) 0 uncycle? task-addr ! ;
  : >task ( a- ) n @ task-addr ! 1 n +! n @ 6 =if 0 n ! then ;
  : task: ( -  ) here >task ] ;
  : yield ( -  ) cycle? task-addr @ 0; execute ;
  : idle  ( -  ) repeat yield again ;
}}
