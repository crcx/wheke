( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Compiler Optimizations for Retro 10                         )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( This is an experimental set of extensions to the core Retro )
( compiler. The words are extended in various ways with the   )
( goal of generating faster, tighter machine code. It should  )
( be noted that this isn't flawless, and may generate bad     )
( code. Use it at your own risk.                              )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Extend ; and ;; to eliminate tail calls                     )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
{
  : call? here 1- 1- @ 7 ;
  : call->jump 8 here 1- 1- ! ;
  : opt-;; ( - ) call? =if call->jump ;; then 9 , ;
  : opt-;  ( - ) call? =if call->jump ` [ ;; then 9 , ` [ ;
  ' opt-;  is ;
  ' opt-;; is ;;
}


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Remap simple sequences to optimal forms:                    )
(   1 + to 1+                                                 )
(   1 - to 1-                                                 )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
{
  : lit? here 1- 1- @ 1 ;
  : opt-+ ( R: nn-n  C: - ) compiler @ -1 =if lit? =if here 1- @ 1 =if -2 heap +! 26 , ;; then then 16 , ;; then [ 16 , ] ;
  : opt-- ( R: nn-n  C: - ) compiler @ -1 =if lit? =if here 1- @ 1 =if -2 heap +! 27 , ;; then then 17 , ;; then [ 17 , ] ;

  ' opt-+ is +  ' .macro reclass +
  ' opt-- is -  ' .macro reclass -
}
