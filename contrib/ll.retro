( Words for creating and using linked lists                   )
(                                                             )
( Jay Skeer, 2010                                             )
( Luke Parrish, 2010                                          )
( Charles Childers, 2010       
( License: ISC                                                )

( !!!WARNING!!! As with any code that allocates memory in the )
( dictionary, if you try to allocate a new linked list cell   )
( while compiling a word, bad things will happen.  Either     )
( change ll.make, or allocate enough cells and put them on    )
( the free list before you need them:                         )

( : preallocate 1000 for ll.new next 1000 for ll.free next ;  )

( see ll-test.retro for usage samples.                        )

: ll.make   (  -L ) here 2 allot ;
: ll.data   ( L-a ) 1+ ;

( Field 0 holds ll.next, so "a @ @ @ @" is the 4th element.   )

( llv.push -- add linked list cell "l" to list stored at "a"  )
: llv.push  ( la- )
  dup push @ over ( ll.next ) ! pop ! ;

( llv.pop -- remove and return first linked list cell l       )
: llv.pop   ( a-l )
  dup push @ dup ( ll.next ) @ pop ! ;

0 variable: ll:freelist

( ll.new -- create a new linked list cell                     )
(           use freelist if available.                        )
: ll.new    ( -l )
  ll:freelist dup @ 0 !if llv.pop ;; then drop ll.make ;

: ll.free   ( l-  )
  ( add L to the free list)
  ll:freelist llv.push ;

( llv.!+ -- Add data to the front of the linked list.         )
: llv.!+    ( xa- )

  dup push @ ll.new dup pop ! !+ ! ;
( llv.@- -- Remove/return the first data from linked list.    )
: llv.@-    ( a-x )
  llv.pop dup ll.data @ swap ll.free ;
