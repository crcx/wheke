( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Safety Net for Retro                                        )
(                                                             )
( Originally written by Luke Parrish                          )
( Updated and Expanded by Charles Childers                    )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( This code provides a more error-tolerant Retro system. It   )
( can detect some stack problems and recover the system to a  )
( clean state in most cases.                                  )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
{{
  variable latest
  variable base

  : cleanup last @ heap ! last @ @ last ! compiler off reset ;
  : inbalance ." ERROR: Stack Inbalance! Cleaning up..." cr cleanup ;
  create <list>  ( -a ) 0 , 0 , 0 , 0 , 0 ,
  : >depth ( - ) depth <list> @ 1+ <list> + ! 1 <list> +! ;
  : depth? ( - ) 1 <list> -! <list> @ 1+ <list> + @ depth !if inbalance then ;
  : end <list> @ 0 !if inbalance then ;

---reveal---
  compiler: [prior last @ latest ! last @ @ last ! ;
  compiler: prior] latest @ last ! ;

  : . ( n- )   [prior depth 0 =if 0 then . prior] ;
  : , ( n- )   [prior depth 0 =if 0 then , prior] ;
  : / ( xy-z ) [prior dup 0 !if / ;; then drop 1 / prior] ;

  compiler: repeat here >depth ;
  compiler: again depth? 8 , , ;

  compiler: for [prior ` for prior] >depth ;
  compiler: next depth? [prior ` next prior] ;

  compiler: =if [prior ` =if prior] >depth ;
  compiler: !if [prior ` !if prior] >depth ;
  compiler: <if [prior ` <if prior] >depth ;
  compiler: >if [prior ` >if prior] >depth ;
  compiler: then [prior ` then prior] depth? ;

  compiler: ; ` ;; ` [ end ;; [
}}
