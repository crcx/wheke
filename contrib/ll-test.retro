( requires ll.retro, Test the words for in ll.retro           )
(                                                             )
( Jay Skeer, 2010                                             )
( Luke Parrish, 2010                                          )
( Charles Childers, 2010                                      )  
( License: ISC                                                )

( search for >>> to see some interesting ways to use ll       )

( safe versions of some of the words, you  don't want these.  )
: z; ( 0; but never drop TOS) dup 0 =if     pop drop then ;
: znip; ( xy-xy | 0)          dup 0 =if nip pop drop then ;

: ll.next ( l-l ) ( 0 + ) ; ( this is a no-op, documentation. )
( since the 0th field is pointer to next, A @ @ @ @ is the    )
( 4th element of A                                            )

( llv.pops -- safe llv.pop, if a is 0 or stores 0, return 0   )
: llv.pops  ( a-l )
  z; dup @ znip; swap push dup ( ll.next ) @ pop ! ;

( Automated Tests. They remove themselves from the vocabulary )
( when they finish.                                           )
stub test  ( marker for "forget"                              )
: ++ 1 swap +! ;
0 variable: tests-run
0 variable: tests-passed
: test.failing cr tests-run @ . ;
: test.expect= tests-run ++ !if test.failing
  ." test.expect= failed" ;; then ." ." tests-passed ++ ;
: test.expect! tests-run ++ =if test.failing
  ." test.expect! failed" ;; then ." ." tests-passed ++ ;
variable lltest
variable lltest1
variable lltest2
variable lltest3
variable lltest4
variable lltest5
: tests
-999 -888
swap dup -999 test.expect= swap dup -888 test.expect=
lltest 0                             test.expect!
lltest @ 0                               test.expect=
ll.make dup 0                        test.expect!
dup lltest1 ! lltest llv.push
swap dup -999 test.expect= swap dup -888 test.expect=
lltest @ 0                           test.expect!
lltest @ ll.next @ 0                     test.expect=
lltest @ lltest1 @                       test.expect=
ll.make dup 0                        test.expect!
dup lltest2 ! lltest llv.push
swap dup -999 test.expect= swap dup -888 test.expect=
lltest @ 0                           test.expect!
lltest @ ll.next @ lltest1 @             test.expect=
lltest @ lltest2 @                       test.expect=
lltest llv.pop lltest3 !
swap dup -999 test.expect= swap dup -888 test.expect=
lltest @ 0                           test.expect!
lltest @ ll.next @ 0                     test.expect=
lltest @ lltest1 @                       test.expect=
lltest2 @ lltest3 @                      test.expect=
0 llv.pops 0                             test.expect=
lltest4 llv.pops 0                       test.expect=
lltest2 @ lltest llv.push
swap dup -999 test.expect= swap dup -888 test.expect=
lltest llv.pops lltest4 !
lltest4 @ lltest2 @                      test.expect=
lltest @ lltest1 @                       test.expect=
ll:freelist @ 0                          test.expect=
ll.new lltest5 !
lltest5 @ 0                          test.expect!
lltest5 @ ll.free
swap dup -999 test.expect= swap dup -888 test.expect=
ll:freelist @ lltest5 @                  test.expect=
lltest5 @ ll.next @ 0                    test.expect=
lltest4 @ ll.free
swap dup -999 test.expect= swap dup -888 test.expect=
ll:freelist @ lltest4 @                  test.expect=
lltest4 @ ll.next @ lltest5 @            test.expect=
lltest5 @ ll.next @ 0                    test.expect=
lltest @ lltest1 @                       test.expect=
lltest llv.pop ll.free
swap dup -999 test.expect= swap dup -888 test.expect=
lltest @ 0                               test.expect=
ll:freelist @ lltest1 @                  test.expect=
lltest1 @ ll.next @ lltest4 @            test.expect=
lltest4 @ ll.next @ lltest5 @            test.expect=
lltest5 @ ll.next @ 0                    test.expect=
swap dup -999 test.expect= swap dup -888 test.expect=
ll.new lltest llv.push
swap dup -999 test.expect= swap dup -888 test.expect=
ll.new lltest llv.push
swap dup -999 test.expect= swap dup -888 test.expect=
lltest  @ lltest4 @                      test.expect=
lltest4 @ ll.next @ lltest1 @            test.expect=
lltest1 @ ll.next @ 0                    test.expect=
ll:freelist @ lltest5 @                  test.expect=
swap dup -999 test.expect= swap dup -888 test.expect=
ll.new lltest llv.push
swap dup -999 test.expect= swap dup -888 test.expect=
lltest  @ lltest5 @                      test.expect=
lltest5 @ ll.next @ lltest4 @            test.expect=
lltest4 @ ll.next @ lltest1 @            test.expect=
lltest1 @ ll.next @ 0                    test.expect=
ll:freelist @ 0                          test.expect=
swap dup -999 test.expect= swap dup -888 test.expect=
lltest llv.pop ll.free
lltest llv.pop ll.free
lltest llv.pop ll.free
swap dup -999 test.expect= swap dup -888 test.expect=
lltest @ 0                               test.expect=
ll:freelist @ lltest1 @                  test.expect=
1 lltest llv.!+
2 lltest llv.!+
3 lltest llv.!+
4 lltest llv.!+
5 lltest llv.!+
6 lltest llv.!+
swap dup -999 test.expect= swap dup -888 test.expect=
lltest llv.@- 6                          test.expect=
lltest llv.@- 5                          test.expect=
lltest llv.@- 4                          test.expect=
lltest llv.@- 3                          test.expect=
lltest llv.@- 2                          test.expect=
lltest llv.@- 1                          test.expect=
lltest @ 0                               test.expect=
swap dup -999 test.expect= swap dup -888 test.expect=
1 lltest llv.!+
2 lltest llv.!+
3 lltest llv.!+
4 lltest llv.!+
5 lltest llv.!+
6 lltest llv.!+
swap dup -999 test.expect= swap dup -888 test.expect=

            ( >>> how to delete from the middle of a list <<< )
            (     remember from ll.retro...                   )

( "a @ @ @" is also a "variable holding the list starting at  )
(                      the 4th element of a.  See ll-test."   )

            ( >>> this removes the FOURTH element, storing 3, )
( lltest @ ll.next @ ll.next @ llv.pop ll.free                )
  lltest @         @         @ llv.pop ll.free

swap dup -999 test.expect= swap dup -888 test.expect=
lltest llv.@- 6                          test.expect=
lltest llv.@- 5                          test.expect=
lltest llv.@- 4                          test.expect=
lltest llv.@- 2                          test.expect=
lltest llv.@- 1                          test.expect=
lltest @ 0                               test.expect=
swap dup -999 test.expect= swap dup -888 test.expect=
1 lltest llv.!+
2 lltest llv.!+
3 lltest llv.!+
4 lltest llv.!+
5 lltest llv.!+
6 lltest llv.!+
swap dup -999 test.expect= swap dup -888 test.expect=

            ( >>> how to delete from the middle of a list <<< )
            ( this removes the SIXTH, last element, storing 1 )
lltest @ @ @ @ @ llv.@- drop
            ( "llv.pop ll.free" is more efficient since it    )
            ( doesn't have to work to return the data there.  )

swap dup -999 test.expect= swap dup -888 test.expect=
lltest llv.@- 6                          test.expect=
lltest llv.@- 5                          test.expect=
lltest llv.@- 4                          test.expect=
lltest llv.@- 3                          test.expect=
lltest llv.@- 2                          test.expect=
lltest @ 0                               test.expect=
swap dup -999 test.expect= swap dup -888 test.expect=
1 lltest llv.!+
2 lltest llv.!+
3 lltest llv.!+
5 lltest llv.!+
6 lltest llv.!+
swap dup -999 test.expect= swap dup -888 test.expect=

            ( >>> how to INSERT into the middle of a list <<< )
            ( this inserts 99 before the THIRD element        )
99 lltest @ @ llv.!+

swap dup -999 test.expect= swap dup -888 test.expect=
lltest llv.@- 6                          test.expect=
lltest llv.@- 5                          test.expect=
lltest llv.@- 99                         test.expect=
lltest llv.@- 3                          test.expect=
lltest llv.@- 2                          test.expect=
lltest llv.@- 1                          test.expect=
lltest @ 0                               test.expect=
swap dup -999 test.expect= swap dup -888 test.expect=
1 lltest llv.!+
2 lltest llv.!+
3 lltest llv.!+
4 lltest llv.!+
5 lltest llv.!+
6 lltest llv.!+
swap dup -999 test.expect= swap dup -888 test.expect=

            ( >>> how to CHANGE the middle of a list <<<      )
            ( >>> this replaces 5 with 99                     )
lltest @ ll.next @ ll.data @ 5   test.expect=  ( read 5 first )
99 lltest @ ll.next @ ll.data !                ( write 99     )
lltest @ ll.next @ ll.data @ 99  test.expect=  ( read 99 now  )
lltest @         @    1+   @ 99  test.expect=  ( same code    )

swap dup -999 test.expect= swap dup -888 test.expect=
lltest llv.@- 6                          test.expect=
lltest llv.@- 99                         test.expect=
lltest llv.@- 4                          test.expect=
lltest llv.@- 3                          test.expect=
lltest llv.@- 2                          test.expect=
lltest llv.@- 1                          test.expect=
lltest @ 0                               test.expect=
swap dup -999 test.expect= swap dup -888 test.expect=

cr
." ran " tests-run @ . ." tests.  "
." passed " tests-passed @ . ." tests."
cr
; tests

( remember the warning about allocating lists in the )
( dictionary?  That's why I have ... )
forget test 0 ll:freelist !
