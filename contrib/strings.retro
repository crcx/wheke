( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( String Manipulation                                         )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Copyright [c] 2009, Luke Parrish                            )
( License: ISC                                                )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )

: prepend ( $$-$ )
  here -rot
  2 for
    dup here swap
    getLength dup
    allot copy
  next
  0 , ;

: append ( $$-$ ) swap prepend ;

: split ( $c-$$ )
  tib !
  here swap
  dup getLength dup
  for 2dup r - +
      @ dup tib @
      =if drop
        here 1+ -rot
      0 then ,
  next
  0 , 2drop ;


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Convert counted and zero-terminated strings.                )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
{{
create buffer 64 allot
---reveal---
: cs ( $-an ) tempString dup getLength ;
: zt ( an-$ ) tuck buffer swap copy 0 swap buffer + ! buffer tempString ;
: cstype fori over + @ emit nexti ;
}}

( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Append/prepend counted strings.                             )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
{{
: sav ( n-n ) ` dup ` push ;
---reveal---
: csprepend ( anan-an )
  here sav swap sav dup allot copy
  here swap sav dup allot copy
  pop pop + pop swap ;
: csappend ( anan-an ) push -rot pop -rot prepend ;
}}


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Get input into a string                                     )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: accept$ ( $c- ) push repeat ekey dup r =if pop 2drop 0 swap ! ;then swap !+ again ;
