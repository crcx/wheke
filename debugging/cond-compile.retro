( [IF] / [THEN] - conditional compilation                   )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Copyright [c] 2009, Charles Childers                      )
( License: ISC                                              )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Descr: This adds [IF] and [THEN] for conditional execution)
( Descr: of words at the listener level. Don't nest them!   )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
{{
  : .noop drop ;
  stub err

  : off
    ['] .noop ['] .word     :is
    ['] .noop ['] .macro    :is
    ['] .noop ['] .data     :is
    ['] .noop ['] .compiler :is
    ['] .noop ['] .primitive :is
    ['] err   ['] notfound  :is
    ['] err   ['] ok        :is
  ;

  : on
    ['] .word     :devector
    ['] .macro    :devector
    ['] .data     :devector
    ['] .compiler :devector
    ['] .primitive :devector
    ['] notfound  :devector
    ['] ok        :devector
  ;
---reveal---
  : [IF] not 0; drop off ;  ' execute reclass
  : [THEN] on ;             ' execute reclass
}}
