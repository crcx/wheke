( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Retrospect by Charles Childers                              )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( This contains a set of words I find useful while debugging  )
( code.                                                       )
(                                                             )
( Stack comments are provided for words which are intended    )
( to be used directly. Internal factors do not have the stack )
( comments provided.                                          )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )

{{
  variable *addr

  : nextOp 1 *addr +! ;
  : @addr *addr @ @ ;
  : .contents @addr . ;
  : .addr *addr @ . ;

  : .ascii dup 32 >if dup 128 <if 39 emit emit 39 emit 0 then then drop ;

  : render type cr drop ;
  : s: 32 accept tib keepString literal, ['] render compile ` ;; ;
  compiler: a: ` over ` =if s: ` then ;

  : .name d->name type cr ;
  : resolve -1 last @ repeat dup d->xt @ @addr =if .name drop 0 ;then 0; @ again ;
  : render type 32 emit drop nextOp resolve 0; drop .contents cr ;
  : x: 32 accept tib keepString literal, ['] render compile ` ;; ;
  compiler: b: ` over ` =if x: ` then ;

  : decompile
    32 emit
    @addr
     0 a: nop      1 b: lit       2 a: dup       3 a: drop
     4 a: swap     5 a: push      6 a: pop       7 b: call
     8 b: jump     9 a: ;        10 b: >jump    11 b: <jump
    12 b: !jump   13 b: =jump    14 a: @        15 a: !
    16 a: +       17 a: -        18 a: *        19 a: /mod
    20 a: and     21 a: or       22 a: xor      23 a: <<
    24 a: >>      25 a: 0;       26 a: 1+       27 a: 1-
    28 a: in      29 a: out      30 a: wait
    s" unknown: " type dup . .ascii cr ;

  : header? @addr 9 =if *addr @ 1+ @ 30 >if .addr decompile pop pop 2drop then then ;
  : vector? @addr 0 =if *addr @ 1+ @ 0 =if pop pop 2drop then then ;
  : more? header? vector? ;
  : getWord ' drop which @ d->xt @ *addr ! ;

---reveal---
  : dump ( an- )  cr for @+ over 1- . . cr next drop ;
  : show ( an- ) swap *addr ! cr for .addr decompile nextOp next ;
  : see  ( "- ) getWord cr repeat .addr decompile nextOp more? again ;
}}
